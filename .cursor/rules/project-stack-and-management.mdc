---
description: 
globs: 
alwaysApply: true
---
---
description: Defines the recommended technology stack and management practices for all projects, including database, search, and environment requirements.
globs: src/**/*
alwaysApply: true
---
# Project Stack and Management

Establish a robust, scalable, and maintainable technology stack for all projects.

## Starter Stack
- **Frontend:** HTML5, CSS3, and Vanilla JavaScript (ES6+)
- **Backend:** Node.js with Express
- **Database:** SQL database only (e.g., SQLite for simple projects, PostgreSQL for robust needs).  
  **Never use JSON file storage for persistent data.**
- **Tooling:** VS Code (or preferred editor), Git, npm

## Scalable Stack
- **Frontend:** React.js (or Vue.js), TypeScript, CSS-in-JS or Tailwind CSS
- **Backend:** Node.js with Express or NestJS
- **Database:** PostgreSQL or MySQL (strictly SQL, no JSON file storage)
- **Search:** Elasticsearch (elastic.co) with separate dev and prod indexes
- **Tooling/DevOps:** Docker, GitHub Actions (or similar CI/CD)  
  **Cloud hosting:** Google Cloud (standard for all deployments)  
  PM2 or Docker Compose, Sentry or LogRocket for monitoring

## Scaling Up
- Refactor codebase as soon as it becomes repetitive or hard to maintain.
- Introduce a frontend framework (React.js or Vue.js) when UI complexity increases.
- Add TypeScript for type safety as your codebase grows.
- Migrate to a robust SQL database (PostgreSQL or MySQL) as data needs increase.
- Use Docker for consistent development and deployment environments.
- Set up automated testing and CI/CD pipelines early.
- **Cloud:** All cloud infrastructure and deployments should use Google Cloud.

## Database & Search
- **Databases:**  
  - Always use separate SQL databases for development, testing, and production environments.
- **Search:**  
  - Use Elasticsearch for search functionality, hosted on elastic.co.
  - Maintain separate indexes for development and production on elastic.co.

## Testing
- Write automated tests for all critical logic.
- Use Python (pytest or unittest) for backend tests.
- Maintain separate test databases and Elasticsearch indexes for testing.

## Ongoing Management
- Regularly review and update dependencies.
- Maintain clear documentation for setup, usage, and contribution.
- Use code reviews and linters to ensure code quality.
- Monitor performance and errors in production.
- Plan for scaling as your user base grows.


**See also:** [(cnces.mdc), [Workflow Preferences](workflow-preferences.mdc)