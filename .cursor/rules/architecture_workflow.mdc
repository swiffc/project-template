---
description:
globs:
alwaysApply: false
---
# Architecture & Workflow Standards (v1.3)

## Project Architecture
- Use modular, layered architecture (domain, application, infrastructure, presentation)
- Organize by feature/module for scalability
- Example folder structure:
  - src/
    - domain/
    - application/
    - infrastructure/
    - presentation/
    - components/
    - utils/
    - tests/
- Separate dev, test, and prod environments
- Use SQL databases (PostgreSQL preferred), never JSON for persistence
- For environment consistency, use Python virtual environments (`venv`), nvm-windows for Node.js, .env files for configuration, and pre-commit hooks. Automate setup and checks with cross-platform scripts (e.g., Python, Justfile). Use CI/CD pipelines for reproducible builds and tests. (No Docker required.)

## Server Architecture
- Use unified server architecture with single origin
- All routes (frontend and API) served from port 3000
- Frontend routes: http://localhost:3000/...
- API routes: http://localhost:3000/api/...
- No proxy configuration needed
- Implement proper CORS and security headers
- Use middleware for request/response handling
- Implement proper error handling and logging

## Workflow
- Use feature branches and PRs for all changes
- Branching strategy: GitFlow or trunk-based (main, develop, feature/*, hotfix/*)
- All code changes require code review and must pass CI
- Automated tests for all major functionality
- Use Task Master for task-driven development (MCP server preferred)
- Start with project initialization, then parse PRD, then break down and implement tasks by complexity
- Use dependency management and task expansion tools to maintain order
- Handle migrations with versioned scripts and document all breaking changes in the changelog

## Scaling & Management
- Refactor as soon as code becomes repetitive or hard to maintain
- Add TypeScript and frontend frameworks as UI complexity grows
- Use Google Cloud for all deployments
- Monitor performance and errors in production
- Maintain clear documentation and update with every significant change
