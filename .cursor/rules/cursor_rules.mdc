---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
# Cursor Rules Guidelines

This document outlines the standards and best practices for creating and maintaining Cursor rules.

## Rule File Structure

Each rule file should follow this structure:

1. **Rule Name**: A clear, descriptive name for the rule
2. **Description**: A brief explanation of what the rule covers
3. **Content**: The actual rule content, organized in sections
4. **References**: Links to related rules or documentation

## Rule File Naming

- Use lowercase with underscores for filenames
- End with `.mdc` extension
- Name should reflect the rule's purpose
- Example: `api_integration.mdc`, `testing_standards.mdc`

## Rule Content Guidelines

1. **Clarity**:
   - Use clear, concise language
   - Include examples where helpful
   - Break complex concepts into digestible sections

2. **Formatting**:
   - Use Markdown for structure
   - Include code blocks with language specification
   - Use lists for step-by-step instructions

3. **Maintenance**:
   - Keep rules up to date
   - Remove deprecated patterns
   - Add new patterns as they emerge

4. **Cross-References**:
   - Link to related rules using `[rule_name](mdc:.cursor/rules/rule_name.mdc)`
   - Reference external documentation when relevant

## Rule Categories

1. **Architecture Rules**:
   - System design patterns
   - Component organization
   - Data flow patterns

2. **Code Style Rules**:
   - Naming conventions
   - Formatting standards
   - Documentation requirements

3. **Process Rules**:
   - Development workflows
   - Testing procedures
   - Deployment practices

4. **Integration Rules**:
   - API integration patterns
   - Third-party service usage
   - Authentication flows

## Rule Updates

When updating rules:

1. Document the reason for the update
2. Maintain backward compatibility when possible
3. Update related rules if necessary
4. Notify team members of significant changes

## Rule Validation

Rules should be:

1. **Testable**: Can be verified in practice
2. **Maintainable**: Easy to update and extend
3. **Relevant**: Address current project needs
4. **Consistent**: Align with other project rules

## Rule Documentation

Each rule should include:

1. **Purpose**: Why the rule exists
2. **Scope**: What the rule covers
3. **Examples**: How to apply the rule
4. **Exceptions**: When the rule doesn't apply
5. **References**: Related rules and documentation

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 